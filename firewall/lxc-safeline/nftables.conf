#!/usr/sbin/nft -f

flush ruleset

table inet filter {
    # Define reusable sets
    set tailscale_trusted_ips {
        type ipv4_addr
        elements = { 100.127.255.1, 100.127.255.2, 100.127.255.3, 100.80.80.81, 100.80.80.82, 100.80.80.83 }
    }

    set tailscale_zoraxy_ips {
        type ipv4_addr
        elements = { 100.80.80.81, 100.80.80.82, 100.80.80.83 }
    }

    set tailscale_tcdns_ips {
        type ipv4_addr
        elements = { 100.64.100.101, 100.64.100.102, 100.64.100.103 }
    }

    set tailscale_subnets {
        type ipv4_addr
        flags interval
        elements = { 100.64.0.0/10 }
    }

    set docker_subnets {
        type ipv4_addr
        flags interval
        elements = { 172.30.0.0/16 }
    }

    chain input {
        type filter hook input priority -10; policy drop;

        # Loopback
        iif "lo" accept

        # Established/related
        ct state established,related accept

        # SSH only via Tailscale
        iifname "tailscale0" tcp dport 22 accept

        # Reverse proxy port via Tailscale
        iifname "tailscale0" ip saddr @tailscale_zoraxy_ips tcp dport 80 accept
        iifname "tailscale0" ip saddr @tailscale_zoraxy_ips tcp dport 443 accept
        iifname "tailscale0" ip saddr @tailscale_tcdns_ips tcp dport 8080 accept
        iifname "tailscale0" ip saddr @tailscale_trusted_ips tcp dport 9443 accept

        # ICMP ping from Tailscale
        iifname "tailscale0" icmp type echo-request accept

        # Drop everything else from Tailscale
        counter log prefix "[NFT DROP INPUT] " limit rate 5/second drop
    }

    chain forward {
        type filter hook forward priority -10; policy drop;

        ct state established,related accept

        # Reverse proxy -> Docker networks
        iifname "tailscale0" ip saddr @tailscale_subnets oifname "docker0" accept
        iifname "tailscale0" ip saddr @tailscale_subnets ip daddr @docker_subnets accept

        # Docker -> Internet
        iifname "docker0" oifname "eth0" accept
        ip saddr @docker_subnets oifname "eth0" accept

        # Docker -> Tailscale replies
        iifname "docker0" oifname "tailscale0" ip daddr @tailscale_subnets accept
        ip saddr @docker_subnets oifname "tailscale0" ip daddr @tailscale_subnets accept

        # Drop rest
        oifname "docker0" counter log prefix "[NFT DROP DOCKER] " limit rate 5/second drop
        ip saddr @docker_subnets counter log prefix "[NFT DROP DOCKER] " limit rate 5/second drop
    }

    chain output {
        type filter hook output priority 0; policy accept;
    }
}

table ip nat {
    chain prerouting {
        type nat hook prerouting priority 0;
    }

    chain postrouting {
        type nat hook postrouting priority 100;

        # NAT Docker -> Internet
        oif "eth0" masquerade
    }
}
